{"version":3,"sources":["config/keys.js","logo.svg","config/dev.js","reducers/index.js","reducers/dataReducer.js","actions/types.js","config/firebase.js","components/EventItem.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","__webpack_require__","p","r","__webpack_exports__","d","FirebaseConfig","apiKey","authDomain","databaseURL","combineReducers","data","state","arguments","length","undefined","action","types","payload","firebase","eventsRef","ref","child","EventItem","onFetchEventsClicked","_this","props","fetchEvents","_this2","this","react_default","a","createElement","onClick","Component","connect","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","on","snapshot","type","val","stop","_x","apply","App","hello","fetch","then","response","text","message","setState","setInterval","components_EventItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAMIA,EAAOC,QAAUC,EAAQ,iFCN7BF,EAAAC,QAAiBE,EAAAC,EAAuB,uFCAxCD,EAAAE,EAAAC,GAAAH,EAAAI,EAAAD,EAAA,mCAAAE,IAGO,IAAMA,EAAiB,CAC1BC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,6ICCFC,cAAgB,CAAEC,KCLlB,WAAwB,IAAvBC,EAAuBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACnC,OAAQC,EAAOC,OACX,ICDoB,eDGhB,OAAOD,EAAOE,QAClB,QACI,OAAON,0GEFnBO,gBAAuBb,kBAEvB,IAEac,EAFOD,aAAoBE,MAEHC,MAAM,UCHrCC,6MACFC,qBAAuB,WAEnBC,EAAKC,MAAMC,uFAGN,IAAAC,EAAAC,KACL,OACIC,EAAAC,EAAAC,cAAA,UAAQC,QAAS,kBAAML,EAAKJ,yBAA5B,uBARYU,aAaTC,cAAQ,KAAM,CAAER,YCdJ,iCAAAS,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAR,EAAAS,KAAM,SAAAC,EAAMC,GAAN,OAAAH,EAAAR,EAAAY,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAE7B1B,EAAU2B,GAAG,QAAS,SAAAC,GAClBN,EAAS,CACLO,KHPgB,eGQhB/B,QAAS8B,EAASE,UALG,wBAAAN,EAAAO,SAAAV,EAAAZ,SAAN,gBAAAuB,GAAA,OAAAhB,EAAAiB,MAAAxB,KAAAhB,YAAA,KDcZsB,CAA+BZ,GEQ/B+B,6MArBX1C,MAAQ,KAMR2C,MAAQ,WACJC,MAAM,cACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFnC,EAAKoC,SAAS,CAACD,QAASA,0FAPhCE,YAAYjC,KAAK0B,MAAO,sCAYxB,OACIzB,EAAAC,EAAAC,cAAC+B,EAAD,aAlBM7B,aCOZ8B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTd,KAAK,SAAAmB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlE,QACf6D,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,gHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KCrFjE,IAAMC,EAAQC,YAAYC,EAAU,GAAIC,YAAgBC,MAExDC,IAASC,OACLhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAUP,MAAOA,GACb1D,EAAAC,EAAAC,cAACgE,EAAD,OAEJC,SAASC,eAAe,SDKrB,SAAkB1B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0B,IAAIC,GAAwBlC,OAAOC,SAASkC,MACpDC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,OAAQ,WAC9B,IAAMhC,EAAK,GAAAiC,OAAMJ,GAAN,sBAEPpC,GAgEV,SAAiCO,EAAOC,GAEtChB,MAAMe,GACHd,KAAK,SAAAC,GAEJ,IAAM+C,EAAc/C,EAASgD,QAAQC,IAAI,gBAEnB,MAApBjD,EAASkD,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMrD,KAAK,SAAAmB,GACjCA,EAAamC,aAAatD,KAAK,WAC7BS,OAAOC,SAAS6C,aAKpB1C,EAAgBC,EAAOC,KAG1Bc,MAAM,WACLJ,QAAQC,IACN,mEArFA8B,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMrD,KAAK,WACjCyB,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,MC3B/BE","file":"static/js/main.7899e107.chunk.js","sourcesContent":["/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\n// if (process.env.NODE_ENV === \"production\") {\r\n//     module.exports = require(\"./prod\");\r\n// } else {\r\n    module.exports = require(\"./dev\");\r\n// }\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nexport const FirebaseConfig = {\r\n    apiKey: \"AIzaSyBMZVAJEOouJVnrgaE6VKi_ajW_V0Mpomc\",\r\n    authDomain: \"eventpool-65e23.firebaseapp.com\",\r\n    databaseURL: \"https://eventpool-65e23.firebaseio.com\"\r\n};\r\n","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport data from './dataReducer';\r\n\r\nexport default combineReducers({ data });","import { FETCH_EVENTS } from '../actions/types';\r\n\r\nexport default (state = {}, action) => {\r\n    switch (action.types) {\r\n        case FETCH_EVENTS:\r\n            debugger;\r\n            return action.payload;\r\n        default:\r\n            return state;\r\n    }\r\n}","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nexport const FETCH_EVENTS = 'FETCH_EVENTS';\r\nexport const FETCH_USERS = 'FETCH_USERS';\r\n","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nimport * as firebase from \"firebase\";\r\nimport { FirebaseConfig } from \"../config/keys\";\r\n\r\nfirebase.initializeApp(FirebaseConfig);\r\n\r\nconst databaseRef = firebase.database().ref();\r\n\r\nexport const eventsRef = databaseRef.child(\"events\")\r\n","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchEvents } from '../actions'\r\n\r\nclass EventItem extends Component {\r\n    onFetchEventsClicked = () => {\r\n        debugger;\r\n        this.props.fetchEvents();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <button onClick={() => this.onFetchEventsClicked()}>Fetch events</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { fetchEvents })(EventItem)\r\n","/**\r\n * Created by Zohar on 06/11/2018.\r\n */\r\nimport { eventsRef } from '../config/firebase';\r\nimport { FETCH_EVENTS } from './types';\r\n\r\nexport const fetchEvents = () => async dispatch => {\r\n    debugger;\r\n    eventsRef.on(\"value\", snapshot => {\r\n        dispatch({\r\n            type: FETCH_EVENTS,\r\n            payload: snapshot.val()\r\n        });\r\n    });\r\n};\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport EventItem from './components/EventItem';\n\nclass App extends Component {\n\n    state = {};\n\n    componentDidMount() {\n        setInterval(this.hello, 250);\n    }\n\n    hello = () => {\n        fetch('/api/hello')\n            .then(response => response.text())\n            .then(message => {\n                this.setState({message: message});\n            });\n    };\n\n    render() {\n        return (\n            <EventItem/>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\nimport reducers from \"./reducers\";\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}